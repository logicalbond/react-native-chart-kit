var __extends =
  (this && this.__extends) ||
  (function() {
    var extendStatics = function(d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function(d, b) {
            d.__proto__ = b;
          }) ||
        function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError(
          "Class extends value " + String(b) + " is not a constructor or null"
        );
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    };
  })();
var __assign =
  (this && this.__assign) ||
  function() {
    __assign =
      Object.assign ||
      function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
import _ from "lodash";
import React from "react";
import { View } from "react-native";
import { G, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "../AbstractChart";
import { mapValue } from "../Utils";
import {
  convertToDate,
  getBeginningTimeForDate,
  shiftDate
} from "./DateHelpers";
import {
  DAYS_IN_WEEK,
  MILLISECONDS_IN_ONE_DAY,
  MONTH_LABELS
} from "./constants";
var SQUARE_SIZE = 20;
var MONTH_LABEL_GUTTER_SIZE = 8;
var paddingLeft = 32;
var ContributionGraph = /** @class */ (function(_super) {
  __extends(ContributionGraph, _super);
  function ContributionGraph(props) {
    var _this = _super.call(this, props) || this;
    var _a = _this.getValueCache(props.values),
      maxValue = _a.maxValue,
      minValue = _a.minValue,
      valueCache = _a.valueCache;
    _this.state = {
      maxValue: maxValue,
      minValue: minValue,
      valueCache: valueCache
    };
    return _this;
  }
  ContributionGraph.prototype.UNSAFE_componentWillReceiveProps = function(
    nextProps
  ) {
    var _a = this.getValueCache(nextProps.values),
      maxValue = _a.maxValue,
      minValue = _a.minValue,
      valueCache = _a.valueCache;
    this.setState({
      maxValue: maxValue,
      minValue: minValue,
      valueCache: valueCache
    });
  };
  ContributionGraph.prototype.getSquareSizeWithGutter = function() {
    return (this.props.squareSize || SQUARE_SIZE) + this.props.gutterSize;
  };
  ContributionGraph.prototype.getMonthLabelSize = function() {
    var _a = this.props.squareSize,
      squareSize = _a === void 0 ? SQUARE_SIZE : _a;
    if (!this.props.showMonthLabels) {
      return 0;
    }
    if (this.props.horizontal) {
      return squareSize + MONTH_LABEL_GUTTER_SIZE;
    }
    return 2 * (squareSize + MONTH_LABEL_GUTTER_SIZE);
  };
  ContributionGraph.prototype.getStartDate = function() {
    return shiftDate(this.getEndDate(), -this.props.numDays + 1); // +1 because endDate is inclusive
  };
  ContributionGraph.prototype.getEndDate = function() {
    return getBeginningTimeForDate(convertToDate(this.props.endDate));
  };
  ContributionGraph.prototype.getStartDateWithEmptyDays = function() {
    return shiftDate(this.getStartDate(), -this.getNumEmptyDaysAtStart());
  };
  ContributionGraph.prototype.getNumEmptyDaysAtStart = function() {
    return this.getStartDate().getDay();
  };
  ContributionGraph.prototype.getNumEmptyDaysAtEnd = function() {
    return DAYS_IN_WEEK - 1 - this.getEndDate().getDay();
  };
  ContributionGraph.prototype.getWeekCount = function() {
    var numDaysRoundedToWeek =
      this.props.numDays +
      this.getNumEmptyDaysAtStart() +
      this.getNumEmptyDaysAtEnd();
    return Math.ceil(numDaysRoundedToWeek / DAYS_IN_WEEK);
  };
  ContributionGraph.prototype.getWeekWidth = function() {
    return DAYS_IN_WEEK * this.getSquareSizeWithGutter();
  };
  ContributionGraph.prototype.getWidth = function() {
    return (
      this.getWeekCount() * this.getSquareSizeWithGutter() -
      this.props.gutterSize
    );
  };
  ContributionGraph.prototype.getHeight = function() {
    return (
      this.getWeekWidth() + (this.getMonthLabelSize() - this.props.gutterSize)
    );
  };
  ContributionGraph.prototype.getValueCache = function(values) {
    var _this = this;
    var minValue = Infinity,
      maxValue = -Infinity;
    return {
      valueCache: values.reduce(function(memo, value) {
        var date = convertToDate(value.date);
        var index = Math.floor(
          (date.valueOf() - _this.getStartDateWithEmptyDays().valueOf()) /
            MILLISECONDS_IN_ONE_DAY
        );
        minValue = Math.min(value[_this.props.accessor], minValue);
        maxValue = Math.max(value[_this.props.accessor], maxValue);
        memo[index] = {
          value: value,
          title: _this.props.titleForValue
            ? _this.props.titleForValue(value)
            : null,
          tooltipDataAttrs: _this.getTooltipDataAttrsForValue(value)
        };
        return memo;
      }, {}),
      minValue: minValue,
      maxValue: maxValue
    };
  };
  ContributionGraph.prototype.getValueForIndex = function(index) {
    if (this.state.valueCache[index]) {
      return this.state.valueCache[index].value;
    }
    return null;
  };
  ContributionGraph.prototype.getClassNameForIndex = function(index) {
    if (this.state.valueCache[index]) {
      if (this.state.valueCache[index].value) {
        var count = this.state.valueCache[index].value[this.props.accessor];
        if (count) {
          var opacity = mapValue(
            count,
            this.state.maxValue === this.state.minValue
              ? 0
              : this.state.minValue,
            isNaN(this.state.maxValue) ? 1 : this.state.maxValue,
            0.15 + 0.05, // + 0.05 to make smaller values a bit more visible
            1
          );
          return this.props.chartConfig.color(opacity);
        }
      }
    }
    return this.props.chartConfig.color(0.15);
  };
  ContributionGraph.prototype.getTitleForIndex = function(index) {
    if (this.state.valueCache[index]) {
      return this.state.valueCache[index].title;
    }
    return this.props.titleForValue ? this.props.titleForValue(null) : null;
  };
  ContributionGraph.prototype.getTooltipDataAttrsForIndex = function(index) {
    var _a;
    if (this.state.valueCache[index]) {
      return this.state.valueCache[index].tooltipDataAttrs;
    }
    return this.getTooltipDataAttrsForValue(
      ((_a = {
        date: null
      }),
      (_a[this.props.accessor] = null),
      _a)
    );
  };
  ContributionGraph.prototype.getTooltipDataAttrsForValue = function(value) {
    var tooltipDataAttrs = this.props.tooltipDataAttrs;
    if (typeof tooltipDataAttrs === "function") {
      return tooltipDataAttrs(value);
    }
    return tooltipDataAttrs;
  };
  ContributionGraph.prototype.getTransformForWeek = function(weekIndex) {
    if (this.props.horizontal) {
      return [weekIndex * this.getSquareSizeWithGutter(), 50];
    }
    return [10, weekIndex * this.getSquareSizeWithGutter()];
  };
  ContributionGraph.prototype.getTransformForMonthLabels = function() {
    if (this.props.horizontal) {
      return null;
    }
    return "".concat(this.getWeekWidth() + MONTH_LABEL_GUTTER_SIZE, ", 0");
  };
  ContributionGraph.prototype.getTransformForAllWeeks = function() {
    if (this.props.horizontal) {
      return "0, ".concat(this.getMonthLabelSize() - 100);
    }
    return null;
  };
  ContributionGraph.prototype.getViewBox = function() {
    if (this.props.horizontal) {
      return "".concat(this.getWidth(), " ").concat(this.getHeight());
    }
    return "".concat(this.getHeight(), " ").concat(this.getWidth());
  };
  ContributionGraph.prototype.getSquareCoordinates = function(dayIndex) {
    if (this.props.horizontal) {
      return [0, dayIndex * this.getSquareSizeWithGutter()];
    }
    return [dayIndex * this.getSquareSizeWithGutter(), 0];
  };
  ContributionGraph.prototype.getMonthLabelCoordinates = function(weekIndex) {
    if (this.props.horizontal) {
      return [
        weekIndex * this.getSquareSizeWithGutter(),
        this.getMonthLabelSize() - MONTH_LABEL_GUTTER_SIZE
      ];
    }
    var verticalOffset = -2;
    return [
      0,
      (weekIndex + 1) * this.getSquareSizeWithGutter() + verticalOffset
    ];
  };
  ContributionGraph.prototype.renderSquare = function(dayIndex, index) {
    var _this = this;
    var indexOutOfRange =
      index < this.getNumEmptyDaysAtStart() ||
      index >= this.getNumEmptyDaysAtStart() + this.props.numDays;
    if (indexOutOfRange && !this.props.showOutOfRangeDays) {
      return null;
    }
    var _a = this.getSquareCoordinates(dayIndex),
      x = _a[0],
      y = _a[1];
    var _b = this.props.squareSize,
      squareSize = _b === void 0 ? SQUARE_SIZE : _b;
    return (
      <Rect
        key={index}
        width={squareSize}
        height={squareSize}
        x={x + paddingLeft}
        y={y}
        title={this.getTitleForIndex(index)}
        fill={this.getClassNameForIndex(index)}
        onPress={function() {
          _this.handleDayPress(index);
        }}
        {...this.getTooltipDataAttrsForIndex(index)}
      />
    );
  };
  ContributionGraph.prototype.handleDayPress = function(index) {
    var _a;
    if (!this.props.onDayPress) {
      return;
    }
    this.props.onDayPress(
      this.state.valueCache[index] && this.state.valueCache[index].value
        ? this.state.valueCache[index].value
        : ((_a = {}),
          (_a[this.props.accessor] = 0),
          (_a.date = new Date(
            this.getStartDate().valueOf() + index * MILLISECONDS_IN_ONE_DAY
          )),
          _a)
    );
  };
  ContributionGraph.prototype.renderWeek = function(weekIndex) {
    var _this = this;
    var _a = this.getTransformForWeek(weekIndex),
      x = _a[0],
      y = _a[1];
    return (
      <G key={weekIndex} x={x} y={y}>
        {_.range(DAYS_IN_WEEK).map(function(dayIndex) {
          return _this.renderSquare(
            dayIndex,
            weekIndex * DAYS_IN_WEEK + dayIndex
          );
        })}
      </G>
    );
  };
  ContributionGraph.prototype.renderAllWeeks = function() {
    var _this = this;
    return _.range(this.getWeekCount()).map(function(weekIndex) {
      return _this.renderWeek(weekIndex);
    });
  };
  ContributionGraph.prototype.renderMonthLabels = function() {
    var _this = this;
    if (!this.props.showMonthLabels) {
      return null;
    }
    var weekRange = _.range(this.getWeekCount() - 1); // don't render for last week, because label will be cut off
    return weekRange.map(function(weekIndex) {
      var endOfWeek = shiftDate(
        _this.getStartDateWithEmptyDays(),
        (weekIndex + 1) * DAYS_IN_WEEK
      );
      var _a = _this.getMonthLabelCoordinates(weekIndex),
        x = _a[0],
        y = _a[1];
      return endOfWeek.getDate() >= 1 && endOfWeek.getDate() <= DAYS_IN_WEEK ? (
        <Text
          key={weekIndex}
          x={x + paddingLeft}
          y={y + 8}
          {..._this.getPropsForLabels()}
        >
          {_this.props.getMonthLabel
            ? _this.props.getMonthLabel(endOfWeek.getMonth())
            : MONTH_LABELS[endOfWeek.getMonth()]}
        </Text>
      ) : null;
    });
  };
  ContributionGraph.prototype.render = function() {
    var style = this.props.style;
    var _a = style.borderRadius,
      borderRadius = _a === void 0 ? 0 : _a;
    if (!borderRadius && this.props.chartConfig.style) {
      var stupidXo = this.props.chartConfig.style.borderRadius;
      borderRadius = stupidXo;
    }
    return (
      <View style={style}>
        <Svg height={this.props.height} width={this.props.width}>
          {this.renderDefs(
            __assign(
              { width: this.props.width, height: this.props.height },
              this.props.chartConfig
            )
          )}
          <Rect
            width="100%"
            height={this.props.height}
            rx={borderRadius}
            ry={borderRadius}
            fill="url(#backgroundGradient)"
          />
          <G>{this.renderMonthLabels()}</G>
          <G>{this.renderAllWeeks()}</G>
        </Svg>
      </View>
    );
  };
  ContributionGraph.defaultProps = {
    numDays: 200,
    endDate: new Date(),
    gutterSize: 1,
    squareSize: SQUARE_SIZE,
    horizontal: true,
    showMonthLabels: true,
    showOutOfRangeDays: false,
    accessor: "count",
    classForValue: function(value) {
      return value ? "black" : "#8cc665";
    },
    style: {}
  };
  return ContributionGraph;
})(AbstractChart);
export default ContributionGraph;
//# sourceMappingURL=data:application/json;base64,
