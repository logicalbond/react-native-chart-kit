var __extends =
  (this && this.__extends) ||
  (function() {
    var extendStatics = function(d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function(d, b) {
            d.__proto__ = b;
          }) ||
        function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError(
          "Class extends value " + String(b) + " is not a constructor or null"
        );
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    };
  })();
var __assign =
  (this && this.__assign) ||
  function() {
    __assign =
      Object.assign ||
      function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
import Pie from "paths-js/pie";
import React from "react";
import { View } from "react-native";
import { G, Path, Rect, Svg, Text } from "react-native-svg";
import AbstractChart from "./AbstractChart";
var ProgressChart = /** @class */ (function(_super) {
  __extends(ProgressChart, _super);
  function ProgressChart() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  ProgressChart.prototype.render = function() {
    var _this = this;
    var _a = this.props,
      width = _a.width,
      height = _a.height,
      style = _a.style,
      data = _a.data,
      hideLegend = _a.hideLegend,
      strokeWidth = _a.strokeWidth,
      strokeColor = _a.strokeColor,
      radius = _a.radius;
    var uniqueKey = Math.random().toString();
    var _b = style.borderRadius,
      borderRadius = _b === void 0 ? 0 : _b,
      _c = style.margin,
      margin = _c === void 0 ? 0 : _c,
      _d = style.marginRight,
      marginRight = _d === void 0 ? 0 : _d;
    if (Array.isArray(data)) {
      data = {
        data: data
      };
    }
    var pies = data.data.map(function(pieData, i) {
      var r = 0;
      var center = [0, 0];
      var length = Array.isArray(data) ? data.length : data.data.length;
      var pieDataValidated = pieData > 1 ? 1 : pieData;
      if (length === 1) {
        r = ((height / 2 - 32) / 2) * 1 + radius;
        center = [0, 0];
      } else {
        r = ((height / 2 - 32) / length) * i + radius;
        center = [-15, 0];
      }
      return Pie({
        r: r,
        R: r,
        center: center,
        data: [pieDataValidated, 1 - pieDataValidated],
        accessor: function(x) {
          return x;
        }
      });
    });
    var pieBackgrounds = data.data.map(function(pieData, i) {
      var r = 0;
      var center = [0, 0];
      var length = Array.isArray(data) ? data.length : data.data.length;
      if (length === 1) {
        r = ((height / 2 - 32) / 2) * 1 + radius;
        center = [0, 0];
      } else {
        r = ((height / 2 - 32) / length) * i + radius;
        center = [-15, 0];
      }
      return Pie({
        r: r,
        R: r,
        center: center,
        data: [0.999, 0.001],
        accessor: function(x) {
          return x;
        }
      });
    });
    var withLabel = function(i) {
      return data.labels && data.labels[i];
    };
    var withColor = function(i) {
      return data.colors && data.colors[i];
    };
    var legend = !hideLegend && (
      <>
        <G>
          {pies.map(function(_, i) {
            return (
              <Rect
                key={Math.random()}
                width="16px"
                height="16px"
                fill={
                  _this.props.withCustomBarColorFromData
                    ? withColor(i)
                    : strokeColor
                    ? strokeColor((i / pies.length) * 0.5, i)
                    : _this.props.chartConfig.color((i / pies.length) * 0.5, i)
                }
                rx={8}
                ry={8}
                x={_this.props.width / 2.5 - 30}
                y={
                  -(_this.props.height / 2.5) +
                  ((_this.props.height * 0.8) /
                    (Array.isArray(data) ? data.length : data.data.length)) *
                    i +
                  12
                }
              />
            );
          })}
        </G>
        <G>
          {pies.map(function(_, i) {
            return (
              <Text
                key={Math.random()}
                x={_this.props.width / 2.5 - 10}
                y={
                  -(_this.props.height / 2.5) +
                  ((_this.props.height * 0.8) /
                    (Array.isArray(data) ? data.length : data.data.length)) *
                    i +
                  12 * 2
                }
                {..._this.getPropsForLabels()}
              >
                {withLabel(i)
                  ? ""
                      .concat(Math.round(100 * data.data[i]), "% ")
                      .concat(data.labels[i])
                  : "".concat(Math.round(100 * data.data[i]), "%")}
              </Text>
            );
          })}
        </G>
      </>
    );
    return (
      <View
        style={__assign({ width: width, height: height, padding: 0 }, style)}
      >
        <Svg width={width - margin * 2 - marginRight} height={height}>
          {this.renderDefs(
            __assign(
              { width: this.props.height, height: this.props.height },
              this.props.chartConfig
            ),
            uniqueKey
          )}
          {this.props.chartConfig.useBackgroundCanvas && (
            <Rect
              width="100%"
              height={this.props.height}
              rx={borderRadius}
              ry={borderRadius}
              fill={"url(#backgroundGradient_".concat(uniqueKey, ")")}
            />
          )}
          <G
            x={this.props.width / (hideLegend || pies.length === 1 ? 2 : 2.5)}
            y={this.props.height / 2}
          >
            <G>
              {pieBackgrounds.map(function(pie, i) {
                return (
                  <Path
                    key={Math.random()}
                    d={pie.curves[0].sector.path.print()}
                    strokeWidth={strokeWidth}
                    stroke={_this.props.chartConfig.color(0.2, i)}
                  />
                );
              })}
            </G>
            <G>
              {pies.map(function(pie, i) {
                return (
                  <Path
                    key={Math.random()}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d={pie.curves[0].sector.path.print()}
                    strokeWidth={strokeWidth}
                    stroke={
                      _this.props.withCustomBarColorFromData
                        ? withColor(i)
                        : strokeColor
                        ? strokeColor((i / pies.length) * 0.5, i)
                        : _this.props.chartConfig.color(
                            (i / pies.length) * 0.5,
                            i
                          )
                    }
                  />
                );
              })}
            </G>
            <G>
              {pies.length === 1 &&
                pies.map(function(pie, i) {
                  return (
                    <G>
                      <Text
                        key={Math.random()}
                        x={0}
                        y={withLabel(i) ? -10 : 0}
                        textAnchor={"middle"}
                        alignmentBaseline={"middle"}
                        strokeWidth={0.5}
                        {..._this.getPropsForLabels()}
                        fontSize={22}
                      >
                        {"".concat(Math.round(100 * data.data[i]), "%")}
                      </Text>
                      {withLabel(i) && (
                        <Text
                          key={Math.random()}
                          x={0}
                          y={20}
                          textAnchor={"middle"}
                          alignmentBaseline={"bottom"}
                          strokeWidth={0.5}
                          {..._this.getPropsForLabels()}
                          fontSize={16}
                        >
                          {data.labels[i]}
                        </Text>
                      )}
                    </G>
                  );
                })}
            </G>
            {pies.length > 1 && legend}
          </G>
        </Svg>
      </View>
    );
  };
  ProgressChart.defaultProps = { style: {}, strokeWidth: 16, radius: 32 };
  return ProgressChart;
})(AbstractChart);
export default ProgressChart;
//# sourceMappingURL=data:application/json;base64,
